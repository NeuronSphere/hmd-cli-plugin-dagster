version: "3.7"

services:
  # This service runs the postgres DB used by dagster for run storage, schedule storage,
  # and event log storage.
  docker_example_postgresql:
    command: psql -h db --username postgres -a --dbname "$POSTGRES_DB" -f /root/sql/db_init.sql
    container_name: docker_example_postgresql
    environment:
      HMD_CUSTOMER_CODE: hmdd2
      HMD_DID: aaa
      HMD_ENVIRONMENT: local
      HMD_REGION: reg1
      PGPASSWORD: admin
    image: ${HMD_LOCAL_NS_CONTAINER_REGISTRY}/hmd-postgres-base:${HMD_POSTGRES_BASE_VERSION:-stable}
    networks:
      - neuronsphere_default
    ports:
      - 65432:5432
    volumes:
      - source: ./dagster/db_init.sql
        target: /root/sql/db_init.sql
        type: bind

  # This service runs the gRPC server that loads your user code, in both dagster-webserver
  # and dagster-daemon. By setting DAGSTER_CURRENT_IMAGE to its own image, we tell the
  # run launcher to use this same image when launching runs in a new container as well.
  # Multiple containers like this can be deployed separately - each just needs to run on
  # its own port, and have its own entry in the workspace.yaml file that's loaded by the
  # webserver.
  docker_example_user_code:
    build:
      context: .
      dockerfile: ./dagster/Dockerfile_user_code
    container_name: docker_example_user_code
    image: docker_example_user_code_image
    restart: always
    environment:
      DAGSTER_POSTGRES_USER: dagster_user
      DAGSTER_POSTGRES_PASSWORD: dagster_password
      DAGSTER_POSTGRES_DB: dagster
      DAGSTER_CURRENT_IMAGE: "docker_example_user_code_image"
    volumes:
      - ${HMD_HOME}/dagster/repo.py:/opt/dagster/app/repo.py
    networks:
      - neuronsphere_default

  # This service runs dagster-webserver, which loads your user code from the user code container.
  # Since our instance uses the QueuedRunCoordinator, any runs submitted from the webserver will be put on
  # a queue and later dequeued and launched by dagster-daemon.
  docker_example_webserver:
    build:
      context: .
      dockerfile: ./dagster/Dockerfile_dagster
    entrypoint:
      - dagster-webserver
      - -h
      - "0.0.0.0"
      - -p
      - "3000"
      - -w
      - workspace.yaml
    container_name: docker_example_webserver
    expose:
      - "3000"
    ports:
      - "3000:3000"
    environment:
      DAGSTER_POSTGRES_USER: dagster_user
      DAGSTER_POSTGRES_PASSWORD: dagster_password
      DAGSTER_POSTGRES_DB: dagster
    volumes: # Make docker client accessible so we can terminate containers from the webserver
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ${HMD_HOME}/dagster/workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      - ${HMD_HOME}/dagster/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
    networks:
      - neuronsphere_default
    depends_on:
      - docker_example_postgresql
      - docker_example_user_code

  # This service runs the dagster-daemon process, which is responsible for taking runs
  # off of the queue and launching them, as well as creating runs from schedules or sensors.
  docker_example_daemon:
    build:
      context: .
      dockerfile: ./dagster/Dockerfile_dagster
    entrypoint:
      - dagster-daemon
      - run
    container_name: docker_example_daemon
    restart: on-failure
    environment:
      DAGSTER_POSTGRES_USER: dagster_user
      DAGSTER_POSTGRES_PASSWORD: dagster_password
      DAGSTER_POSTGRES_DB: dagster
      HMD_HOME: ${HMD_HOME}
    volumes: # Make docker client accessible so we can launch containers using host docker
      - /var/run/docker.sock:/var/run/docker.sock
      - /tmp/io_manager_storage:/tmp/io_manager_storage
      - ${HMD_HOME}/dagster/workspace.yaml:/opt/dagster/dagster_home/workspace.yaml
      - ${HMD_HOME}/dagster/dagster.yaml:/opt/dagster/dagster_home/dagster.yaml
    networks:
      - neuronsphere_default
    depends_on:
      - docker_example_postgresql
      - docker_example_user_code
